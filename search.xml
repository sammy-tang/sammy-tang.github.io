<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有限域上运算的实现（Java）</title>
      <link href="2020/12/20/%E6%9C%89%E9%99%90%E5%9F%9F%E4%B8%8A%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/"/>
      <url>2020/12/20/%E6%9C%89%E9%99%90%E5%9F%9F%E4%B8%8A%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="1-加深对有限域结构的理解，实现常用的有限域上元素的基本运算。"><a href="#1-加深对有限域结构的理解，实现常用的有限域上元素的基本运算。" class="headerlink" title="1.    加深对有限域结构的理解，实现常用的有限域上元素的基本运算。"></a>1.    加深对有限域结构的理解，实现常用的有限域上元素的基本运算。</h4><h4 id="2-编程实现GF（28）域中元素的运算，提供使用说明手册，可执行代码、源代码及测试用例（包括测试用例手册、可执行代码和源代码）。"><a href="#2-编程实现GF（28）域中元素的运算，提供使用说明手册，可执行代码、源代码及测试用例（包括测试用例手册、可执行代码和源代码）。" class="headerlink" title="2.    编程实现GF（28）域中元素的运算，提供使用说明手册，可执行代码、源代码及测试用例（包括测试用例手册、可执行代码和源代码）。"></a>2.    编程实现GF（28）域中元素的运算，提供使用说明手册，可执行代码、源代码及测试用例（包括测试用例手册、可执行代码和源代码）。</h4><h4 id="3-提供该算法的源代码及测试用例，给出运行结果分析。"><a href="#3-提供该算法的源代码及测试用例，给出运行结果分析。" class="headerlink" title="3.    提供该算法的源代码及测试用例，给出运行结果分析。"></a>3.    提供该算法的源代码及测试用例，给出运行结果分析。</h4><p>实验原理：<br><img src="/2020/12/20/%E6%9C%89%E9%99%90%E5%9F%9F%E4%B8%8A%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/1.jpg" alt="原理1"><br><img src="/2020/12/20/%E6%9C%89%E9%99%90%E5%9F%9F%E4%B8%8A%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/2.jpg" alt="原理2"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GF256</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+x</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+x^2+x^3+x^4+x^5+x^6+x^7</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+x+x^5+x^6+x^8</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> N <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本原元</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选取两个多项式："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 和 "</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******普通算法******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多项式相乘："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span> polynthic3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rev <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">,</span> polynthic3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在GF(2^8)上的乘法逆元为："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****构造对数指数表*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createExpAndLog</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> log<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printExpAndLog</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fastMul <span class="token operator">=</span> <span class="token function">GFfastMul</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"快速查表乘法："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>fastMul<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fastExgcd <span class="token operator">=</span> <span class="token function">fastExGcd</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"快速查表逆元："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>fastExgcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多项式求逆元     * @param polynthic1 待求逆元多项式     * @param polynthic3 不可拆多项式     * @return 逆元     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Int x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Int y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelPolynthicInverseAlgorithm<span class="token punctuation">.</span><span class="token function">Gcd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic3<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 输出指数表和对数表     * @param exp 指数表     * @param log 对数表     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printExpAndLog</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exp<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exp:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> log<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nlog:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> log<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>log<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 快速查表逆元     * @param polynthic1 待求逆元的多项式     * @param exp 指数表     * @param log 对数表     * @return 逆元二进制数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fastExGcd</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exp<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 二进制转十进制</span>        <span class="token keyword">int</span> poTwo1 <span class="token operator">=</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> exp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> log<span class="token punctuation">[</span>poTwo1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制转二进制</span>        <span class="token keyword">return</span> <span class="token function">tenTurnTwo</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 快速查表乘法     * @param polynthic1 多项式1     * @param polynthic2 多项式2     * @param exp 指数表     * @param log 对数表     * @return 乘法结果     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GFfastMul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exp<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 二进制转十进制</span>        <span class="token keyword">int</span> poTwo1 <span class="token operator">=</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> poTwo2 <span class="token operator">=</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span>polynthic2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> log<span class="token punctuation">[</span>poTwo1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> log<span class="token punctuation">[</span>poTwo2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> exp<span class="token punctuation">[</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制转二进制</span>        <span class="token keyword">return</span> <span class="token function">tenTurnTwo</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构造指数对数表     * @param exp 指数表     * @param log 对数表     * @param n 本原元     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createExpAndLog</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exp<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> log<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> birth <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> divisor <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            birth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> birth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            birth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmp <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tmp <span class="token operator">=</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            log<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            birth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> birth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            birth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainder <span class="token operator">=</span> ModelPolynthicInverseAlgorithm<span class="token punctuation">.</span><span class="token function">WithResidualDivider</span><span class="token punctuation">(</span>birth<span class="token punctuation">.</span>length <span class="token operator">-</span> divisor<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>                    birth<span class="token punctuation">,</span> divisor<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>birth<span class="token punctuation">.</span>length <span class="token operator">-</span> divisor<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>            exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            log<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        exp<span class="token punctuation">[</span>exp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制数组转十进制     * @param twoNum 二进制数组     * @return 十进制数值     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">twoTurnTen</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> twoNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> twoNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>twoNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                ten <span class="token operator">+=</span> t<span class="token punctuation">;</span>            t <span class="token operator">=</span> t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ten<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 十进制数转二进制数组     * @param tenNum 十进制数值     * @return 二进制数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">tenTurnTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> tenNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">></span> tenNum<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            two<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tenNum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            tenNum <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> two<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * GF(2^8)域上元素乘法运算，调用实验三的方法     * @param polynthic1 多项式1     * @param polynthic2 多项式2     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> multiplication <span class="token operator">=</span> ModelPolynthicInverseAlgorithm<span class="token punctuation">.</span><span class="token function">Multiplication</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ModelPolynthicInverseAlgorithm<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> multiplication<span class="token punctuation">,</span> polynthic3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把多项式数组转换成String类型的多项式     * @param ans 要转换的多项式数组     * @return String类型的多项式     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">intArrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuffer ansSb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"X"</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"X^"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"X^"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ansSb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> ansSb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ansSb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ansSb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 公钥密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模多项式求逆的实现（Java）</title>
      <link href="2020/12/20/%E6%A8%A1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E9%80%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/12/20/%E6%A8%A1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E9%80%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-熟悉一种模多项式求逆算法；"><a href="#1-熟悉一种模多项式求逆算法；" class="headerlink" title="1.    熟悉一种模多项式求逆算法；"></a>1.    熟悉一种模多项式求逆算法；</h4><h4 id="2-运用高级程序设计语言完成一种模多项式求逆算法的程序，加深对多项式运算的理解；"><a href="#2-运用高级程序设计语言完成一种模多项式求逆算法的程序，加深对多项式运算的理解；" class="headerlink" title="2.    运用高级程序设计语言完成一种模多项式求逆算法的程序，加深对多项式运算的理解；"></a>2.    运用高级程序设计语言完成一种模多项式求逆算法的程序，加深对多项式运算的理解；</h4><h4 id="3-提供该算法的源代码及测试用例，给出运行结果分析"><a href="#3-提供该算法的源代码及测试用例，给出运行结果分析" class="headerlink" title="3.    提供该算法的源代码及测试用例，给出运行结果分析"></a>3.    提供该算法的源代码及测试用例，给出运行结果分析</h4><p>实验原理：<br><img src="/2020/12/20/%E6%A8%A1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E9%80%86%E7%9A%84%E5%AE%9E%E7%8E%B0/1.png" alt="原理1"><br><img src="/2020/12/20/%E6%A8%A1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E9%80%86%E7%9A%84%E5%AE%9E%E7%8E%B0/2.png" alt="原理2"><br><img src="/2020/12/20/%E6%A8%A1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E9%80%86%E7%9A%84%E5%AE%9E%E7%8E%B0/3.png" alt="原理3"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelPolynthicInverseAlgorithm</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入多项式计算数域Zp的p值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+X+X^2+X^3+X^4+X^5</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+X+X^2+X^4</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选取两个多项式："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 和 "</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mulAns <span class="token operator">=</span> <span class="token function">Multiplication</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多项式乘法："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>mulAns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">-</span> polynthic2<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 商</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> quo <span class="token operator">:</span> quotient<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainder <span class="token operator">=</span> <span class="token function">WithResidualDivider</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">-</span> polynthic2<span class="token punctuation">.</span>length<span class="token punctuation">,</span> p<span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span>                quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多项式带余除法的商："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>quotient<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，余数："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Int x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Int y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gcd <span class="token operator">=</span> <span class="token function">Gcd</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公因式为: "</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公因式可以表示为："</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>gcd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>                <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>polynthic2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> <span class="token string">"("</span>                <span class="token operator">+</span> <span class="token function">intArrayToString</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 求乘法逆元     * @param p 域     * @param polynthic1 多项式1     * @param polynthic2 多项式2     * @param x 逆元1     * @param y 逆元2     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">Gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">,</span> Int x<span class="token punctuation">,</span> Int y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> po1 <span class="token operator">=</span> polynthic1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> po2 <span class="token operator">=</span> polynthic2<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用递归函数</span>        <span class="token keyword">return</span> <span class="token function">exGcd</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> po1<span class="token punctuation">,</span> po2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 扩展的欧几里得方法求乘法逆元     * @param p 域     * @param polynthic1 多项式1     * @param polynthic2 多项式2     * @param x 逆元1     * @param y 逆元2     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exGcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">,</span> Int x<span class="token punctuation">,</span> Int y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>polynthic2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> X <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Y <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>v <span class="token operator">=</span> X<span class="token punctuation">;</span>            y<span class="token punctuation">.</span>v <span class="token operator">=</span> Y<span class="token punctuation">;</span>            <span class="token keyword">return</span> polynthic1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">-</span> polynthic2<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            quotient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">-</span> polynthic2<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainder <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> polynthic1<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">==</span> polynthic2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quotient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>polynthic1<span class="token punctuation">.</span>length <span class="token operator">-</span> polynthic2<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            quotient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gcd <span class="token operator">=</span> <span class="token function">exGcd</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> polynthic2<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> y<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        y<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">Subtraction</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> x<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token function">Multiplication</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> quotient<span class="token punctuation">,</span> y<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>v <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> gcd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多项式减法     * @param subtracted 被减数     * @param subtractor 减数     * @return 减法结果数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">Subtraction</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subtracted<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subtractor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtracted<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> subtractor<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> subtracted<span class="token punctuation">;</span>            subtracted <span class="token operator">=</span> subtractor<span class="token punctuation">;</span>            subtractor <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subtracted<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> subtractor<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>subtracted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> subtractor<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                subtracted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> subtracted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> subtractor<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                subtracted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">+</span> subtracted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> subtractor<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> subtracted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多项式除法     * @param p 域     * @param remainder 被除数     * @param divisor 除数     * @param quotient 商     * @return 余数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> divisor<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">.</span>length <span class="token operator">==</span> divisor<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">.</span>length <span class="token operator">-</span> divisor<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">WithResidualDivider</span><span class="token punctuation">(</span>remainder<span class="token punctuation">.</span>length <span class="token operator">-</span> divisor<span class="token punctuation">.</span>length<span class="token punctuation">,</span> p<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> divisor<span class="token punctuation">,</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> remainder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多项式加法     * @param p 域     * @param polynthic1 多项式1     * @param polynthic2 多项式2     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> po1 <span class="token operator">=</span> polynthic1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> po2 <span class="token operator">=</span> polynthic2<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>po1<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> po2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> po1<span class="token punctuation">;</span>            po1 <span class="token operator">=</span> po2<span class="token punctuation">;</span>            po1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> po2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>po2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                po1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>po1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> po2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> po1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归解决多项式除法     * @param p 域     * @param remainder 余数/被除数     * @param divisor 除数（不变）     * @param quotient 商     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">WithResidualDivider</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remainder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> divisor<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> remainder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        quotient<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>remainder<span class="token punctuation">[</span>remainder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> divisor<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                remainder<span class="token punctuation">[</span>i <span class="token operator">+</span> len<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>remainder<span class="token punctuation">[</span>i <span class="token operator">+</span> len<span class="token punctuation">]</span> <span class="token operator">-</span> divisor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> remainder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> remainder<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newReminder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> newReminder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newReminder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> remainder<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">WithResidualDivider</span><span class="token punctuation">(</span>newReminder<span class="token punctuation">.</span>length <span class="token operator">-</span> divisor<span class="token punctuation">.</span>length<span class="token punctuation">,</span> p<span class="token punctuation">,</span> newReminder<span class="token punctuation">,</span> divisor<span class="token punctuation">,</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 多项式乘法     * @param p 域     * @param polynthic1 多项式1     * @param polynthic2 多项式2     * @return 多项式乘法结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">Multiplication</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> polynthic2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> polynthic1<span class="token punctuation">.</span>length <span class="token operator">+</span> polynthic2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> polynthic1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> polynthic2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>polynthic1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> polynthic2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> polynthic1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> polynthic2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把多项式数组转换成String类型的多项式     * @param ans 要转换的多项式数组     * @return String类型的多项式     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">intArrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuffer ansSb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"X"</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"X^"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansSb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"X^"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ansSb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> ansSb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ansSb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ansSb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 公钥密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模指数运算的实现（Java）</title>
      <link href="2020/12/20/%E6%A8%A1%E6%8C%87%E6%95%B0%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/12/20/%E6%A8%A1%E6%8C%87%E6%95%B0%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="（1）-掌握常用的模指数算法的实现方法，即：求ae-mod-m-的值"><a href="#（1）-掌握常用的模指数算法的实现方法，即：求ae-mod-m-的值" class="headerlink" title="（1）    掌握常用的模指数算法的实现方法，即：求ae mod m 的值"></a>（1）    掌握常用的模指数算法的实现方法，即：求ae mod m 的值</h4><h4 id="（2）-算法采用重复平方乘的方法实现"><a href="#（2）-算法采用重复平方乘的方法实现" class="headerlink" title="（2）    算法采用重复平方乘的方法实现"></a>（2）    算法采用重复平方乘的方法实现</h4><h4 id="（3）要求m的大小为512比特-1024比特，a和e可以随机产生"><a href="#（3）要求m的大小为512比特-1024比特，a和e可以随机产生" class="headerlink" title="（3）要求m的大小为512比特~1024比特，a和e可以随机产生"></a>（3）要求m的大小为512比特~1024比特，a和e可以随机产生</h4><p>实验原理：<br>多精度整数除法<br>重复平方乘算法<br><img src="/2020/12/20/%E6%A8%A1%E6%8C%87%E6%95%B0%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0/1.jpg" alt="原理"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入模m:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指数</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 底数</span>        String twoNum <span class="token operator">=</span> <span class="token function">turnTwo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指数转为二进制</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">modExponentialOperations</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> m<span class="token punctuation">,</span> twoNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">"^"</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"mod"</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成指数e或者底数b     * @return [1,100]随机数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 模指数运算     * @param b 底数     * @param m 模     * @param twoNum 指数的二进制     * @return 余数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">modExponentialOperations</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> String twoNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> twoNum<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>twoNum<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 十进制转二进制     * @param tenNum 十进制数     * @return 二进制数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">turnTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> tenNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tenNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">=</span> tenNum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>            tenNum <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 公钥密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多精度整数运算的实现（Java）</title>
      <link href="2020/12/20/%E5%A4%9A%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/"/>
      <url>2020/12/20/%E5%A4%9A%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="（1）掌握一种1024比特整数的加减乘除运算原理；"><a href="#（1）掌握一种1024比特整数的加减乘除运算原理；" class="headerlink" title="（1）掌握一种1024比特整数的加减乘除运算原理；"></a>（1）掌握一种1024比特整数的加减乘除运算原理；</h4><h4 id="（2）依据所选择的算法，编程实现该算法；"><a href="#（2）依据所选择的算法，编程实现该算法；" class="headerlink" title="（2）依据所选择的算法，编程实现该算法；"></a>（2）依据所选择的算法，编程实现该算法；</h4><h4 id="（3）提供该算法的源代码及测试用例，给出运行结果分析。"><a href="#（3）提供该算法的源代码及测试用例，给出运行结果分析。" class="headerlink" title="（3）提供该算法的源代码及测试用例，给出运行结果分析。"></a>（3）提供该算法的源代码及测试用例，给出运行结果分析。</h4><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiPrecisionIntegerOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String bigNum1 <span class="token operator">=</span> <span class="token string">"10101"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16+4+1=21</span>        String bigNum2 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token comment" spellcheck="true">// 十进制转二进制：</span>        <span class="token keyword">int</span> tenNum1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tenNum2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        bigNum1 <span class="token operator">=</span> <span class="token function">turnTwo</span><span class="token punctuation">(</span>tenNum1<span class="token punctuation">)</span><span class="token punctuation">;</span>        bigNum2 <span class="token operator">=</span> <span class="token function">turnTwo</span><span class="token punctuation">(</span>tenNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigNum1 <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> tenNum1 <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"与"</span> <span class="token operator">+</span> bigNum2 <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> tenNum2 <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String add <span class="token operator">=</span> <span class="token function">bigAdd</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">,</span> bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sub <span class="token operator">=</span> <span class="token function">bigSubtracte</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">,</span> bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String mul <span class="token operator">=</span> <span class="token function">bigMultiplicate</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">,</span> bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String div <span class="token operator">=</span> <span class="token function">bigDivision</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">,</span> bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigNum1 <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> bigNum2 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">turnTen</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 24</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigNum1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> bigNum2 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">turnTen</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 18</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigNum1 <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> bigNum2 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">turnTen</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>mul<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 63</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigNum1 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> bigNum2 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">turnTen</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 7</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制转十进制     * @param twoNum 二进制数     * @return 十进制数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">turnTen</span><span class="token punctuation">(</span><span class="token keyword">int</span> twoNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>twoNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> twoNum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                decimal <span class="token operator">+=</span> temp <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                twoNum <span class="token operator">=</span> twoNum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>                p<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 十进制转二进制     * @param tenNum 十进制数     * @return 二进制数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">turnTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> tenNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tenNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">=</span> tenNum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>            tenNum <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制除法     * @param bigNum1 二进制数     * @param bigNum2 二进制数     * @return 商     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">bigDivision</span><span class="token punctuation">(</span>String bigNum1<span class="token punctuation">,</span> String bigNum2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>bigNum1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 商</span>        <span class="token function">doDivision</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> quotient<span class="token punctuation">,</span> bigNum1<span class="token punctuation">,</span> bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigNum1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>quotient<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归做除法     * @param index 商的下标     * @param quotient 商数组     * @param remainder 被除数/余数     * @param divisor 除数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doDivision</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> quotient<span class="token punctuation">,</span> String remainder<span class="token punctuation">,</span> String divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回判断条件：余数/被除数小于除数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSmall</span><span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> divisor<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 补零</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">+</span> remainder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> end <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> quotient<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            quotient<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String newRemainder <span class="token operator">=</span> remainder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isSmall</span><span class="token punctuation">(</span>newRemainder<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> quotient<span class="token punctuation">.</span>length <span class="token operator">-</span> remainder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                quotient<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newRemainder <span class="token operator">=</span> remainder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">++</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newRemainder <span class="token operator">=</span> <span class="token function">bigSubtracte</span><span class="token punctuation">(</span>newRemainder<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        quotient<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新余数</span>        StringBuffer sbNewRemainder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>newRemainder<span class="token punctuation">)</span><span class="token punctuation">;</span>        sbNewRemainder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>remainder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> remainder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doDivision</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> quotient<span class="token punctuation">,</span> sbNewRemainder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断二进制数大小     * @param remainder 余数     * @param divisor 被除数     * @return true/false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSmall</span><span class="token punctuation">(</span>String remainder<span class="token punctuation">,</span> String divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> divisor<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制乘法     * @param bigNum1 二进制数     * @param bigNum2 二进制数     * @return 积     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">bigMultiplicate</span><span class="token punctuation">(</span>String bigNum1<span class="token punctuation">,</span> String bigNum2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ans <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> bigNum2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bigNum2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 给低位补零</span>                sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigNum2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ans <span class="token operator">=</span> <span class="token function">bigAdd</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制减法     * @param bigNum1 二进制数     * @param bigNum2 二进制数     * @return 差     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">bigSubtracte</span><span class="token punctuation">(</span>String bigNum1<span class="token punctuation">,</span> String bigNum2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sbZero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>bigNum1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> bigNum2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sbZero<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sbZero<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String bigString <span class="token operator">=</span> sbZero<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bigString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String ans <span class="token operator">=</span> <span class="token function">bigAdd</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">bigAdd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> bigNum1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> bigNum1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> ans<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二进制加法     * @param bigNum1 二进制数     * @param bigNum2 二进制数     * @return 和     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">bigAdd</span><span class="token punctuation">(</span>String bigNum1<span class="token punctuation">,</span> String bigNum2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> bigNum1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> bigNum2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> bigNum1<span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> bigNum2<span class="token punctuation">;</span>        StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先将位数较少的二进制高位补零</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">></span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>len1 <span class="token operator">-</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bigNum2<span class="token punctuation">)</span><span class="token punctuation">;</span>            s1 <span class="token operator">=</span> bigNum1<span class="token punctuation">;</span>            s2 <span class="token operator">=</span> sb1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>len2 <span class="token operator">-</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bigNum1<span class="token punctuation">)</span><span class="token punctuation">;</span>            s1 <span class="token operator">=</span> sb1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s2 <span class="token operator">=</span> bigNum2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 进位</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        StringBuffer sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> z<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 倒置</span>        sb2<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 公钥密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单移位加密算法-斯巴达手杖</title>
      <link href="2020/12/11/%E7%AE%80%E5%8D%95%E7%A7%BB%E4%BD%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-%E6%96%AF%E5%B7%B4%E8%BE%BE%E6%89%8B%E6%9D%96/"/>
      <url>2020/12/11/%E7%AE%80%E5%8D%95%E7%A7%BB%E4%BD%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-%E6%96%AF%E5%B7%B4%E8%BE%BE%E6%89%8B%E6%9D%96/</url>
      
        <content type="html"><![CDATA[<p>斯巴达手杖是一种借助工具实现的移位加密方法，其基本原理是将书写信息的纸条（或羊皮）缠绕在特定的木棍上，然后自上到下写上明文信息，最后将字条从木棍上取下，构成明文的字母顺序就被打乱，当纸条重新被缠绕回相同的木棍时字母顺序被还原，从而可以读取明文信息。假定木棍的截面为一个正六边型，简单的示意如图1所示。<br><img src="/2020/12/11/%E7%AE%80%E5%8D%95%E7%A7%BB%E4%BD%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-%E6%96%AF%E5%B7%B4%E8%BE%BE%E6%89%8B%E6%9D%96/1.png" alt="pic"><br>模拟斯巴达手杖的加密过程，可以看做将明文按列写入矩阵，然后按行输出到数组，通过一个逆过程可以重新得到明文。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpartanEncryption</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 示例：</span>        String Plaintext <span class="token operator">=</span> <span class="token string">"There are moments in life when you miss someone "</span>                <span class="token operator">+</span> <span class="token string">"so much that you just want to pick them from your dreams "</span>                <span class="token operator">+</span> <span class="token string">"and hug them for real! Dream what you want to dream;"</span>                <span class="token operator">+</span> <span class="token string">"go where you want to go;be what you want to be,"</span> <span class="token operator">+</span> <span class="token string">"because you have only one life and one chance "</span>                <span class="token operator">+</span> <span class="token string">"to do all the things you want to do."</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入明文</span><span class="token comment" spellcheck="true">//        System.out.println("请输入明文：");</span><span class="token comment" spellcheck="true">//        Scanner sc = new Scanner(System.in);</span><span class="token comment" spellcheck="true">//        Plaintext = sc.nextLine();</span>        <span class="token comment" spellcheck="true">// 生成密钥</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>Plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密钥是:"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密</span>        String ciphertext <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> Plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文是:"</span> <span class="token operator">+</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解密</span>        String decrypttext <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文是:"</span> <span class="token operator">+</span> decrypttext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成密钥     * @param Plaintext 明文     * @return 密钥     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>String Plaintext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据字符串的长短确定密钥的生成范围</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Plaintext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// [10,30]</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Plaintext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// [2,10]</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2,3]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解密     * @param password 密钥     * @param ciphertext 密文     * @return 明文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> password<span class="token punctuation">,</span> String ciphertext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> deMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算列</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> password<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 商</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> password<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 余数</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true:有余数，false:无余数</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> num <span class="token operator">:</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphChar <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先把密文按照行的方式输入第一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            deMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i <span class="token operator">%</span> size<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ciphChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把密文按照行的方式把剩下的输入</span>        <span class="token comment" spellcheck="true">// 要注意输入最后一列的时候，要分成两种情况</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ciphChar<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有余数并且在最后一行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> size <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 最后一行还能输入</span>                    r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不能输入了</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>deMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">%</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i <span class="token operator">%</span> size<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ciphChar<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历map，按照列的方式append到sb中</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> deMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加密     * @param password 密钥     * @param plaintext 明文     * @return 密文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> password<span class="token punctuation">,</span> String plaintext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 相当于把ciMap变成一个i列password行的二维数组</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> ciMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key：第i列，value：密文</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ciMap的key值</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于存放ciMap每一列的字符</span>        <span class="token comment" spellcheck="true">// 将明文按照列存放进map</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plaintext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> key<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> password <span class="token operator">>=</span> plaintext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 最后一行不够password个字符，直接截取到最后一个</span>                ciMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> plaintext<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ciMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> plaintext<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 截取password个字符</span>            i <span class="token operator">+=</span> password<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从map按照行取出字符作为密文</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> password<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 遍历行</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> ciMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 遍历列</span>                <span class="token comment" spellcheck="true">// 将第index列的第i个字符append</span>                ch <span class="token operator">=</span> ciMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单替代加密算法-凯撒加密</title>
      <link href="2020/12/11/%E7%AE%80%E5%8D%95%E6%9B%BF%E4%BB%A3%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-%E5%87%AF%E6%92%92%E5%8A%A0%E5%AF%86/"/>
      <url>2020/12/11/%E7%AE%80%E5%8D%95%E6%9B%BF%E4%BB%A3%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-%E5%87%AF%E6%92%92%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>凯撒密码是最早出现的一种替代加解密算法，其基本思路是先将字母进行编码，a=0，b=1，……，z=25，选择一个正整数k(0&lt;k≤25)，加密过程为计算c=f(m)=(m+k)mod26，其中m为被加密的字母，c为加密后得到的字母；解密过程为计算m=f^’ (c)=c-kmod26。凯撒密码是最早出现的一种替代加解密算法，其基本思路是先将字母进行编码，a=0，b=1，……，z=25，选择一个正整数k(0&lt;k≤25)，加密过程为计算c=f(m)=(m+k)mod26，其中m为被加密的字母，c为加密后得到的字母；解密过程为计算m=f^’ (c)=c-kmod26。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaesarCipher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 示例：</span>        String Plaintext <span class="token operator">=</span> <span class="token string">"There are moments in life when you miss someone so much that you "</span>                <span class="token operator">+</span> <span class="token string">"just want to pick them from your dreams and hug them for real! Dream what "</span>                <span class="token operator">+</span> <span class="token string">"you want to dream;go where you want to go;be what you want to be,"</span>                <span class="token operator">+</span> <span class="token string">"because you have only one life and one chance to do all the things you want to do."</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入明文</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入明文："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Plaintext <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成密钥</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密钥是："</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密</span>        String ciphertext <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> Plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文是:"</span> <span class="token operator">+</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解密</span>        String decrypttext <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文是："</span> <span class="token operator">+</span> decrypttext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成密钥     * @return 密钥     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解密     * @param key 密钥     * @param ciphertext 密文     * @return 明文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> String ciphertext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是小写字母</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">-</span> key <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是大写字母</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">-</span> key <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 其余直接append</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加密     * @param key 密钥     * @param plaintext 明文     * @return 密文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> String plaintext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> plaintext<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是小写字母</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是大写字母</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 其余直接append</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL添加（C语言）</title>
      <link href="2020/06/18/AVL%E6%B7%BB%E5%8A%A0%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/06/18/AVL%E6%B7%BB%E5%8A%A0%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>平衡二叉树，是一种二叉排序树，其中每个结点的左子树和右子树的高度差至多等于1。它是一种高度平衡的二叉排序树。现二叉平衡树结点定义如下：</p><pre class=" language-javascript"><code class="language-javascript">typedef struct node<span class="token punctuation">{</span>    int val<span class="token punctuation">;</span>    struct node <span class="token operator">*</span>left<span class="token punctuation">;</span>    struct node <span class="token operator">*</span>right<span class="token punctuation">;</span>    struct node <span class="token operator">*</span>parent<span class="token punctuation">;</span>    int height<span class="token punctuation">;</span><span class="token punctuation">}</span> node_t<span class="token punctuation">;</span></code></pre><p>请实现平衡二叉树的插入算法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//向根为 root 的平衡二叉树插入新元素 val，成功后返回新平衡二叉树根结点</span>node_t <span class="token operator">*</span><span class="token function">avl_insert</span><span class="token punctuation">(</span>node_t <span class="token operator">*</span>root<span class="token punctuation">,</span> int val<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答案：<br>注意：对于这个parent弄得不是很清楚，希望有大佬可以指点一下。其实没有parent也能过。。。</p><pre class=" language-javascript"><code class="language-javascript">node_t<span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> T<span class="token punctuation">,</span> int X<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token function">GetHeight</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token function">Max</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span>node_t<span class="token operator">*</span> <span class="token function">SingleLeftRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>node_t<span class="token operator">*</span> <span class="token function">DoubleLeftRightRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>node_t<span class="token operator">*</span> <span class="token function">SingleRightRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>node_t<span class="token operator">*</span> <span class="token function">DoubleRightLeftRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token function">Max</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function">GetHeight</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>        <span class="token keyword">return</span> T<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>node_t<span class="token operator">*</span> <span class="token function">SingleLeftRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//左单旋</span><span class="token punctuation">{</span>    node_t<span class="token operator">*</span> B<span class="token punctuation">;</span>    B <span class="token operator">=</span> A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>    A<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> B<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>    B<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> A<span class="token punctuation">;</span>    A<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    B<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>B<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>B<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> B<span class="token punctuation">;</span><span class="token punctuation">}</span>node_t<span class="token operator">*</span> <span class="token function">DoubleLeftRightRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//左右双旋</span><span class="token punctuation">{</span>    A<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">SingleRightRotation</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">SingleLeftRotation</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>node_t<span class="token operator">*</span> <span class="token function">SingleRightRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//右单旋</span><span class="token punctuation">{</span>    node_t<span class="token operator">*</span> B<span class="token punctuation">;</span>    B <span class="token operator">=</span> A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>    A<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> B<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>    B<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> A<span class="token punctuation">;</span>    A<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    B<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>B<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>B<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> B<span class="token punctuation">;</span><span class="token punctuation">}</span>node_t<span class="token operator">*</span> <span class="token function">DoubleRightLeftRotation</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> A<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//右左双旋</span><span class="token punctuation">{</span>    A<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">SingleLeftRotation</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">SingleRightRotation</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>node_t<span class="token operator">*</span> <span class="token function">avl_insert</span><span class="token punctuation">(</span>node_t<span class="token operator">*</span> root<span class="token punctuation">,</span> int val<span class="token punctuation">)</span><span class="token punctuation">{</span>    node_t<span class="token operator">*</span> parentNode <span class="token operator">=</span> NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token punctuation">(</span>node_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>node_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> NULL<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parentNode <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">avl_insert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>                root <span class="token operator">=</span> <span class="token function">SingleLeftRotation</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                root <span class="token operator">=</span> <span class="token function">DoubleLeftRightRotation</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parentNode <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">avl_insert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>                root <span class="token operator">=</span> <span class="token function">SingleRightRotation</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                root <span class="token operator">=</span> <span class="token function">DoubleRightLeftRotation</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    root<span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> parentNode<span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表添加（C语言）</title>
      <link href="2020/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B7%BB%E5%8A%A0%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B7%BB%E5%8A%A0%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表。哈希表相关定义如下：</p><pre class=" language-javascript"><code class="language-javascript">typedef <span class="token keyword">enum</span><span class="token punctuation">{</span>    HASH_OK<span class="token punctuation">,</span>    HASH_ERROR<span class="token punctuation">,</span>    HASH_ADDED<span class="token punctuation">,</span>    HASH_REPLACED_VALUE<span class="token punctuation">,</span>    HASH_ALREADY_ADDED<span class="token punctuation">,</span>    HASH_DELETED<span class="token punctuation">,</span>    HASH_NOT_FOUND<span class="token punctuation">,</span><span class="token punctuation">}</span> HASH_RESULT<span class="token punctuation">;</span>typedef struct __HashEntry HashEntry<span class="token punctuation">;</span>struct __HashEntry<span class="token punctuation">{</span>    union<span class="token punctuation">{</span>        char  <span class="token operator">*</span>str_value<span class="token punctuation">;</span>        double dbl_value<span class="token punctuation">;</span>        int       int_value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> key<span class="token punctuation">;</span>    union<span class="token punctuation">{</span>        char  <span class="token operator">*</span>str_value<span class="token punctuation">;</span>        double dbl_value<span class="token punctuation">;</span>        int       int_value<span class="token punctuation">;</span>        long   long_value<span class="token punctuation">;</span>        <span class="token keyword">void</span>  <span class="token operator">*</span>ptr_value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> value<span class="token punctuation">;</span>    HashEntry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>struct __HashTable<span class="token punctuation">{</span>    HashEntry <span class="token operator">**</span>bucket<span class="token punctuation">;</span>            int size<span class="token punctuation">;</span>    HASH_RESULT last_error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>typedef struct __HashTable HashTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向哈希表中添加元素，其中键类型为char*， 元素类型为int。</span>HASH_RESULT <span class="token function">hash_add_int</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span> table<span class="token punctuation">,</span> <span class="token keyword">const</span> char <span class="token operator">*</span> key<span class="token punctuation">,</span> int value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>哈希表相关说明：<br>HASH_RESULT 类型为相关函数的返回类型<br>HashEntry 为哈希表所保存元素（即键值对 《key, value》）类型<br>HashTable 为哈希表，其中 bucket 指向大小为size的、元素类型为 HashEntry<em>的指针数组<br>哈希表采用链地址法处理冲突<br>请实现 hash_add_int 函数，向哈希表中添加元素，其中键类型为char</em>， 元素类型为int。在添加过程中，如果要添加的键值key已在哈希表中，且对应的值value也已存在，则函数返回 HASH_ALREADY_ADDED；如果要添加的键值key已在哈希表中，但对应的值value不同，则函数将value值更新到哈希表中，之后返回 HASH_REPLACED_VALUE；如果要添加的键值key不在哈希表中，则函数创建 HashEntry 类型，并将其加入到哈希表中，且函数返回 HASH_ADDED。本题所用的哈希函数如下：</p><pre class=" language-javascript"><code class="language-javascript">long <span class="token function">hash_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    long hash <span class="token operator">=</span> <span class="token number">5381</span><span class="token punctuation">;</span>    int c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token operator">*</span>str<span class="token operator">++</span><span class="token punctuation">)</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hash <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> hash<span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* hash * 33 + c */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hash <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        hash <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>答案如下：</p><pre class=" language-javascript"><code class="language-javascript">#include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">></span>int <span class="token function">Find</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">,</span> <span class="token keyword">const</span> char<span class="token operator">*</span> key<span class="token punctuation">,</span> int value<span class="token punctuation">,</span> long keyhash<span class="token punctuation">)</span><span class="token punctuation">{</span>    HashEntry<span class="token operator">*</span> Head <span class="token operator">=</span> table<span class="token operator">-</span><span class="token operator">></span>bucket<span class="token punctuation">[</span>keyhash<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Head <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>Head<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">.</span>str_value<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Head <span class="token operator">=</span> Head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Head<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Head<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span>int_value <span class="token operator">==</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        Head<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span>int_value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>HASH_RESULT <span class="token function">hash_add_int</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">,</span> <span class="token keyword">const</span> char<span class="token operator">*</span> key<span class="token punctuation">,</span> int value<span class="token punctuation">)</span><span class="token punctuation">{</span>    int p<span class="token punctuation">;</span>    long keyhash <span class="token operator">=</span> <span class="token function">hash_string</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-</span><span class="token operator">></span>size<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> keyhash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashEntry<span class="token operator">*</span> Node <span class="token operator">=</span> <span class="token punctuation">(</span>HashEntry<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>HashEntry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Node<span class="token punctuation">)</span>            <span class="token keyword">return</span> HASH_ERROR<span class="token punctuation">;</span>        Node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">.</span>str_value <span class="token operator">=</span> <span class="token punctuation">(</span>char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">.</span>str_value <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> HASH_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">.</span>str_value <span class="token operator">=</span> <span class="token punctuation">(</span>char<span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>        Node<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span>int_value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Node->next = table->bucket[keyhash]; //？</span>        table<span class="token operator">-</span><span class="token operator">></span>bucket<span class="token punctuation">[</span>keyhash<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">;</span>        <span class="token keyword">return</span> HASH_ADDED<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HASH_REPLACED_VALUE<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> HASH_ALREADY_ADDED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表创建（C语言分离链接法/链地址法）</title>
      <link href="2020/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%88%9B%E5%BB%BA%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95-%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95%EF%BC%89/"/>
      <url>2020/06/14/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%88%9B%E5%BB%BA%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95-%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表。哈希表相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>    HASH_OK<span class="token punctuation">,</span>    HASH_ERROR<span class="token punctuation">,</span>    HASH_ADDED<span class="token punctuation">,</span>    HASH_REPLACED_VALUE<span class="token punctuation">,</span>    HASH_ALREADY_ADDED<span class="token punctuation">,</span>    HASH_DELETED<span class="token punctuation">,</span>    HASH_NOT_FOUND<span class="token punctuation">,</span><span class="token punctuation">}</span> HASH_RESULT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> __HashEntry HashEntry<span class="token punctuation">;</span><span class="token keyword">struct</span> __HashEntry<span class="token punctuation">{</span>    <span class="token keyword">union</span><span class="token punctuation">{</span>        <span class="token keyword">char</span>  <span class="token operator">*</span>str_value<span class="token punctuation">;</span>        <span class="token keyword">double</span> dbl_value<span class="token punctuation">;</span>        <span class="token keyword">int</span>       int_value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> key<span class="token punctuation">;</span>    <span class="token keyword">union</span><span class="token punctuation">{</span>        <span class="token keyword">char</span>  <span class="token operator">*</span>str_value<span class="token punctuation">;</span>        <span class="token keyword">double</span> dbl_value<span class="token punctuation">;</span>        <span class="token keyword">int</span>       int_value<span class="token punctuation">;</span>        <span class="token keyword">long</span>   long_value<span class="token punctuation">;</span>        <span class="token keyword">void</span>  <span class="token operator">*</span>ptr_value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> value<span class="token punctuation">;</span>    HashEntry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> __HashTable<span class="token punctuation">{</span>    HashEntry <span class="token operator">*</span><span class="token operator">*</span>bucket<span class="token punctuation">;</span>            <span class="token keyword">int</span> size<span class="token punctuation">;</span>    HASH_RESULT last_error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> __HashTable HashTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建大小为hash_size的哈希表，创建成功后返回HashTable类型的指针，否则返回NULL。</span>HashTable <span class="token operator">*</span><span class="token function">create_hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash_size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>哈希表相关说明：<br>1.HASH_RESULT 类型为相关函数的返回类型<br>2.HashEntry 为哈希表所保存元素（即键值对 《key, value》）类型<br>3.HashTable 为哈希表，其中 bucket 指向大小为size的、元素类型为<br>4.HashEntry*的指针数组哈希表采用链地址法处理冲突</p><p>请实现 create_hash 函数，创建指定大小的哈希表。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>HashTable<span class="token operator">*</span> <span class="token function">create_hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    HashTable<span class="token operator">*</span> H <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    H<span class="token operator">-></span>bucket <span class="token operator">=</span> <span class="token punctuation">(</span>HashEntry<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashEntry<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>H<span class="token operator">-></span>bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    H<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">return</span> H<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接表2（C语言）</title>
      <link href="2020/05/23/%E9%82%BB%E6%8E%A5%E8%A1%A82%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/05/23/%E9%82%BB%E6%8E%A5%E8%A1%A82%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>试在邻接表存储结构上实现图的基本操作 del_vertex，相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>    DG<span class="token punctuation">,</span> UDG<span class="token punctuation">}</span>GraphType<span class="token punctuation">;</span>ypedef <span class="token keyword">struct</span> ArcNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    InfoPtr <span class="token operator">*</span>info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ArcNode <span class="token operator">*</span>nextarc<span class="token punctuation">;</span> <span class="token punctuation">}</span>ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VNode<span class="token punctuation">{</span>    VertexType data<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">}</span>VNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    VNode vertex<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>    GraphType type<span class="token punctuation">;</span><span class="token punctuation">}</span>ListGraph<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate_vertex</span><span class="token punctuation">(</span>ListGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回顶点 v 在vertex数组中的下标，如果v不存在，返回-1</span>bool <span class="token function">insert_vertex</span><span class="token punctuation">(</span>ListGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">insert_arc</span><span class="token punctuation">(</span>ListGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">,</span> VertexType w<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当成功删除顶点或边时，函数返回true，否则（如顶点或边不存在、删除边时顶点v或w不存在）返回false。</p><pre class=" language-c"><code class="language-c">bool <span class="token function">del_vertex</span><span class="token punctuation">(</span>ListGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> V <span class="token operator">=</span> <span class="token function">locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>V <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检查是否存在该节点</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//先删除从该节点出发的边和该节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ArcNode<span class="token operator">*</span> P <span class="token operator">=</span> G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>nextarc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//先free表头结点后面的</span>            ArcNode<span class="token operator">*</span> temp <span class="token operator">=</span> P<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            P<span class="token operator">-></span>nextarc <span class="token operator">=</span> temp<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//free表头结点</span>            G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        G<span class="token operator">-></span>arcnum<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//边的数量-1</span>    <span class="token punctuation">}</span>    G<span class="token operator">-></span>vexnum<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点的数量-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> V<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//表头结点中，后面的向前移动</span>        G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//再删除到该节点的边</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArcNode <span class="token operator">*</span>P <span class="token operator">=</span> G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">,</span> <span class="token operator">*</span>pNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        ArcNode<span class="token operator">*</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储要被删掉的结点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>V <span class="token operator">==</span> P<span class="token operator">-></span>adjvex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//P的下个结点是V</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//P是表头结点</span>                    temp <span class="token operator">=</span> G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>                    G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> P<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    pNode<span class="token operator">-></span>nextarc <span class="token operator">=</span> P<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>                    temp <span class="token operator">=</span> P<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                P <span class="token operator">=</span> P<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                G<span class="token operator">-></span>arcnum<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                pNode <span class="token operator">=</span> P<span class="token punctuation">;</span>                P <span class="token operator">=</span> P<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接表1（C语言）</title>
      <link href="2020/05/10/%E9%82%BB%E6%8E%A5%E8%A1%A81%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/05/10/%E9%82%BB%E6%8E%A5%E8%A1%A81%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>试在邻接表存储结构上实现图的基本操作 insert_vertex 和 insert_arc，相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>    DG<span class="token punctuation">,</span> UDG<span class="token punctuation">}</span>GraphType<span class="token punctuation">;</span>ypedef <span class="token keyword">struct</span> ArcNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    InfoPtr <span class="token operator">*</span>info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ArcNode <span class="token operator">*</span>nextarc<span class="token punctuation">;</span> <span class="token punctuation">}</span>ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VNode<span class="token punctuation">{</span>    VertexType data<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">}</span>VNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    VNode vertex<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>    GraphType type<span class="token punctuation">;</span><span class="token punctuation">}</span>ListGraph<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">locate_vertex</span><span class="token punctuation">(</span>ListGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回顶点 v 在vertex数组中的下标，如果v不存在，返回-1</span>bool <span class="token function">insert_vertex</span><span class="token punctuation">(</span>ListGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">insert_arc</span><span class="token punctuation">(</span>ListGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">,</span> VertexType w<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答案:</p><pre class=" language-c"><code class="language-c">bool <span class="token function">insert_vertex</span><span class="token punctuation">(</span>ListGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> G<span class="token operator">-></span>vexnum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> MAX_VERTEX_NUM<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> v<span class="token punctuation">;</span>    G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    G<span class="token operator">-></span>vexnum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">insert_arc</span><span class="token punctuation">(</span>ListGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">,</span> VertexType w<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接矩阵（C语言）</title>
      <link href="2020/05/10/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/05/10/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>试在邻接矩阵存储结构上实现图的基本操作 matrix_insert_vertex 和matrix_insert_arc，相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>    DG<span class="token punctuation">,</span> UDG<span class="token punctuation">}</span>GraphType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    VertexType vertex<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点向量</span>    <span class="token keyword">int</span> arcs<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//邻接矩阵</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//图的当前顶点数和弧数</span>    GraphType type<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//图的种类标志</span><span class="token punctuation">}</span>MatrixGraph<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">matrix_locate_vertex</span><span class="token punctuation">(</span>MatrixGraph MG<span class="token punctuation">,</span> VertexType vex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回顶点 v 在vertex数组中的下标，如果v不存在，返回-1</span>bool <span class="token function">matrix_insert_vertex</span><span class="token punctuation">(</span>MatrixGraph G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">matrix_insert_arc</span><span class="token punctuation">(</span>MatrixGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">,</span> VertexType w<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当成功插入顶点或边时，函数返回true，否则（如顶点或边已存在、插入边时顶点v或w不存在）返回false。</p><pre class=" language-c"><code class="language-c">bool <span class="token function">matrix_insert_vertex</span><span class="token punctuation">(</span>MatrixGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matrix_locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> G<span class="token operator">-></span>vexnum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> MAX_VERTEX_NUM<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    G<span class="token operator">-></span>vertex<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    G<span class="token operator">-></span>vexnum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>G<span class="token operator">-></span>vexnum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">matrix_insert_arc</span><span class="token punctuation">(</span>MatrixGraph<span class="token operator">*</span> G<span class="token punctuation">,</span> VertexType v<span class="token punctuation">,</span> VertexType w<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> V <span class="token operator">=</span> <span class="token function">matrix_locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> W <span class="token operator">=</span> <span class="token function">matrix_locate_vertex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>V <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> W <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>type <span class="token operator">==</span> <span class="token string">"DG"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token operator">-></span>arcs<span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    G<span class="token operator">-></span>arcnum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树转二叉树（C语言，使用队列）</title>
      <link href="2020/04/29/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%98%9F%E5%88%97%EF%BC%89/"/>
      <url>2020/04/29/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%98%9F%E5%88%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>使用队列，编写transfrom函数，将普通树转换成对应的二叉树。二叉树的相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><p>普通树节点的定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX_CHILDREN_NUM 5</span><span class="token keyword">struct</span> _CSNode<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> _CSNode <span class="token operator">*</span>children<span class="token punctuation">[</span>MAX_CHILDREN_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _CSNode CSNode<span class="token punctuation">;</span></code></pre><p>其中，子树的根节点的指针存放在children数组的前k个元素中，即如果children[i]的值为NULL，而children[i-1]不为NULL，则表明该结点只有i棵子树，子树根结点分别保存在children[0]至children[i-1]中。<br>队列相关定义及操作如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> __Queue<span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向数组内元素的游标</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> __Queue Queue<span class="token punctuation">;</span>Queue<span class="token operator">*</span> <span class="token function">create_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建队列</span>bool <span class="token function">is_empty_queue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队为空返回true,不为空时返回false</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">del_queue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点指针出队</span><span class="token keyword">void</span> <span class="token function">add_queue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点指针入队</span><span class="token keyword">void</span> <span class="token function">free_queue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放队列</span></code></pre><p>transform函数定义如下：</p><pre class=" language-c"><code class="language-c">BiTNode<span class="token operator">*</span> <span class="token function">transform</span><span class="token punctuation">(</span>CSNode <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 root 为普通树的根结点，函数返回该树对应二叉树的根结点。</p><pre class=" language-c"><code class="language-c">BiTNode<span class="token operator">*</span> <span class="token function">transform</span><span class="token punctuation">(</span>CSNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化根节点</span>    BiTree broot <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    broot<span class="token operator">-></span>data <span class="token operator">=</span> root<span class="token operator">-></span>data<span class="token punctuation">;</span>    broot<span class="token operator">-></span>left <span class="token operator">=</span> broot<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//普通树、二叉树初始化、加入队列</span>    Queue<span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token function">create_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Queue<span class="token operator">*</span> bqueue <span class="token operator">=</span> <span class="token function">create_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_queue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_queue</span><span class="token punctuation">(</span>bqueue<span class="token punctuation">,</span> broot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当普通树的队列不为空时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_empty_queue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从两个队列中分别取出一个结点</span>        CSNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">del_queue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        BiTree bTreeNode <span class="token operator">=</span> <span class="token function">del_queue</span><span class="token punctuation">(</span>bqueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        BiTree former <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历普通树结点的所有孩子结点，将孩子加入队列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_CHILDREN_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BiTree bnode <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bnode<span class="token operator">-></span>left <span class="token operator">=</span> bnode<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                bnode<span class="token operator">-></span>data <span class="token operator">=</span> node<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>data<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//普通树的第一个孩子作为二叉树的左孩子</span>                    bTreeNode<span class="token operator">-></span>left <span class="token operator">=</span> bnode<span class="token punctuation">;</span>                 <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//后面的孩子结点作为前面结点的右孩子</span>                    former<span class="token operator">-></span>right <span class="token operator">=</span> bnode<span class="token punctuation">;</span>                former <span class="token operator">=</span> bnode<span class="token punctuation">;</span>                <span class="token function">add_queue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> node<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">add_queue</span><span class="token punctuation">(</span>bqueue<span class="token punctuation">,</span> bnode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>bqueue<span class="token operator">-></span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>bqueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> broot<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后，还有一个没能实现的想法，就是看成图的邻接表，像建立一个邻接表一样，建立这个二叉树。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树根节点到任意节点的路径</title>
      <link href="2020/04/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>2020/04/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>假设二叉树采用二叉链表方式存储， root指向根结点，node 指向二叉树中的一个结点，编写函数 path，计算root到 node 之间的路径，（该路径包括root结点和 node 结点）。path 函数声明如下：</p><pre class=" language-c"><code class="language-c">bool <span class="token function">path</span><span class="token punctuation">(</span>BiTNode<span class="token operator">*</span> root<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> node<span class="token punctuation">,</span> Stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，root指向二叉树的根结点，node指向二叉树中的另一结点，s 为已经初始化好的栈，该栈用来保存函数所计算的路径，如正确找出路径，则函数返回 true，此时root在栈底，node在栈顶；如未找到，则函数返回 false, 二叉树的相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><p>栈的相关定义及操作如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> Stack_Size 50</span><span class="token keyword">typedef</span> BiTNode<span class="token operator">*</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>Stack_Size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>Stack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化栈</span>bool <span class="token function">push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//x 入栈</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出栈，元素保存到px所指的单元，函数返回true,栈为空时返回 false</span>bool <span class="token function">top</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取栈顶元素，将其保存到px所指的单元，函数返回true，栈满时返回 false</span>bool <span class="token function">is_empty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 栈为空时返回 true，否则返回 false</span></code></pre><p>答案：</p><pre class=" language-c"><code class="language-c">bool <span class="token function">path</span><span class="token punctuation">(</span>BiTNode<span class="token operator">*</span> root<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> node<span class="token punctuation">,</span> Stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree T <span class="token operator">=</span> root<span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> node <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> node<span class="token punctuation">)</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            T <span class="token operator">=</span> T<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token operator">-></span>right <span class="token operator">||</span> T<span class="token operator">-></span>right <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> T<span class="token punctuation">;</span>            <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            T <span class="token operator">=</span> T<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于 T-&gt;right == p的作用：<br>第二次访问1的时候，p在这个位置，T在第二个位置，这时还会访问T-&gt;right，如果没有这个，就成循环了。<br><img src="/2020/04/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84/1.jpg" alt="实例"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树共同祖先（C语言，非递归）</title>
      <link href="2020/04/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%B1%E5%90%8C%E7%A5%96%E5%85%88%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
      <url>2020/04/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%B1%E5%90%8C%E7%A5%96%E5%85%88%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>假设二叉树采用二叉链表方式存储， root指向根结点，p所指结点和q所指结点为二叉树中的两个结点，编写一个计算它们的最近的共同祖先，函数定义如下：</p><pre class=" language-c"><code class="language-c">BiTNode <span class="token operator">*</span> <span class="token function">nearest_ancestor</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">,</span> BiTNode <span class="token operator">*</span>p<span class="token punctuation">,</span> BiTNode <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 root 指向二叉树的根结点，p 和 q 分别指向二叉树中的两个结点。<br>提示：在完成本题时，可利用 path 函数获取p和q两个结点到根结点之间的路径，之后再计算两条公共路径得出最近的共同祖先。path函数及栈相关定义如下：</p><pre class=" language-c"><code class="language-c">bool <span class="token function">path</span><span class="token punctuation">(</span>BiTNode<span class="token operator">*</span> root<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> node<span class="token punctuation">,</span> Stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> Stack_Size 50</span><span class="token keyword">typedef</span> BiTNode<span class="token operator">*</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>Stack_Size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>Stack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化栈</span>bool <span class="token function">push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//x 入栈</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出栈，元素保存到px所指的单元，函数返回true,栈为空时返回 false</span>bool <span class="token function">top</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取栈顶元素，将其保存到px所指的单元，函数返回true，栈满时返回 false</span>bool <span class="token function">is_empty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 栈为空时返回 true，否则返回 false</span></code></pre><p>方法一：</p><pre class=" language-c"><code class="language-c">BiTNode<span class="token operator">*</span> <span class="token function">nearest_ancestor</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> p<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Stack s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>    BiTNode <span class="token operator">*</span>Node1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>Node2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化栈</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">path</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到两个栈的路径</span>    <span class="token function">path</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//弹出元素，由于是先序遍历，最开始可能是不同的元素。保存到Node中，同时总数加一</span>        <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node1<span class="token punctuation">[</span>num1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node2<span class="token punctuation">[</span>num2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//找两个路径相同之处</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Node1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Node2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Node1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到则返回，后面都是相同的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方法二：</p><pre class=" language-c"><code class="language-c">BiTNode<span class="token operator">*</span> <span class="token function">nearest_ancestor</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> p<span class="token punctuation">,</span> BiTNode<span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>    BiTNode<span class="token operator">*</span> Node1<span class="token punctuation">;</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">path</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">path</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    Node1 <span class="token operator">=</span> s1<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Node1<span class="token punctuation">;</span>        Node1 <span class="token operator">=</span> s1<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Node1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树先序遍历（C语言，非递归）</title>
      <link href="2020/04/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
      <url>2020/04/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>已知二叉树按照二叉链表方式存储，利用栈的基本操作写出先序遍历非递归形式的算法：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在遍历过程中，pre_order函数需要调用 visit_node 函数来实现对结点的访问，该函数声明如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">visit_node</span><span class="token punctuation">(</span>BiTNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>二叉树的相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><p>遍历所使用栈的相关操作如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> Stack_Size 50</span><span class="token keyword">typedef</span> BiTNode<span class="token operator">*</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>Stack_Size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>Stack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化栈</span>bool <span class="token function">push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//x 入栈</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出栈，元素保存到px所指的单元，函数返回true,栈为空时返回 false</span>bool <span class="token function">top</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取栈顶元素，将其保存到px所指的单元，函数返回true，栈满时返回 false</span>bool <span class="token function">is_empty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 栈为空时返回 true，否则返回 false</span></code></pre><p>答案：<br>非递归先序遍历：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>BiTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack S<span class="token punctuation">[</span>Stack_Size<span class="token punctuation">]</span><span class="token punctuation">;</span>    BiTree T <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个创建一个空堆栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_empty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">visit_node</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>            T <span class="token operator">=</span> T<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//左边全压入栈</span>        <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        T <span class="token operator">=</span> T<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如果有更好的方法或者以上程序有任何错误，欢迎讨论。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十字链表初始化、删除（C语言）</title>
      <link href="2020/04/17/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/04/17/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>十字链表相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非零元素结点结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> OLNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> row<span class="token punctuation">,</span>col<span class="token punctuation">;</span>    ElemType value<span class="token punctuation">;</span>    <span class="token keyword">struct</span> OLNode <span class="token operator">*</span>right<span class="token punctuation">,</span><span class="token operator">*</span>down<span class="token punctuation">;</span><span class="token punctuation">}</span>OLNode<span class="token punctuation">,</span><span class="token operator">*</span>OLink<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 十字链表结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    OLink <span class="token operator">*</span>rowhead<span class="token punctuation">,</span><span class="token operator">*</span>colhead<span class="token punctuation">;</span>    <span class="token keyword">int</span> rows<span class="token punctuation">,</span>cols<span class="token punctuation">,</span>nums<span class="token punctuation">;</span><span class="token punctuation">}</span>CrossList<span class="token punctuation">,</span> <span class="token operator">*</span>PCrossList<span class="token punctuation">;</span></code></pre><p>1）实现十字链表的初始化操作：</p><pre class=" language-c"><code class="language-c"> <span class="token keyword">int</span> <span class="token function">init_cross_list</span><span class="token punctuation">(</span>PCrossList L<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType <span class="token operator">*</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 L 指向 CrossList 结构，且各成员已被初始化为0；<br> A 为 ElemType 类型数组中第一个元素的地址，元素的个数为 m×n 个，按行优先存储（即A[0] 为十字链表第1行第1列的元素；<br> A[1] 为第1行第2列的元素，A[n] 为第2行第1列的元素，A[n+1] 为第2行第2个元素）；<br> m 表示十字链表的行数，n 表示十字链表的列数。<br> init_cross_list 函数将 ElemType 数组中非0元素保存到十字链表中，函数返回非 0 元素的个数。</p><p>2）实现十字链表的删除操作：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">del_cross_list</span><span class="token punctuation">(</span>PCrossList L<span class="token punctuation">,</span> ElemType k<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 L 指向 要处理的 CrossList 结构，k 为要删除的元素；<br> del_cross_list 函数删除十字链表中所有值为 k 的结点，并返回删除结点的个数。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">init_cross_list</span><span class="token punctuation">(</span>PCrossList L<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType<span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    OLNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    L<span class="token operator">-></span>rows <span class="token operator">=</span> m<span class="token punctuation">;</span>    L<span class="token operator">-></span>cols <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token operator">-></span>rowhead <span class="token operator">=</span> <span class="token punctuation">(</span>OLink<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLink<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token operator">-></span>colhead <span class="token operator">=</span> <span class="token punctuation">(</span>OLink<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLink<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>OLNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">;</span>                p<span class="token operator">-></span>row <span class="token operator">=</span> i<span class="token punctuation">;</span>                p<span class="token operator">-></span>col <span class="token operator">=</span> j<span class="token punctuation">;</span>                p<span class="token operator">-></span>value <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>col <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token operator">-></span>right <span class="token operator">=</span> L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>right<span class="token operator">-></span>col <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> q <span class="token operator">=</span> q<span class="token operator">-></span>right<span class="token punctuation">)</span>                        <span class="token punctuation">;</span>                    p<span class="token operator">-></span>right <span class="token operator">=</span> q<span class="token operator">-></span>right<span class="token punctuation">;</span>                    q<span class="token operator">-></span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>row <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token operator">-></span>down <span class="token operator">=</span> L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> L<span class="token operator">-></span>colhead<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>down<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>down<span class="token operator">-></span>row <span class="token operator">&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> q <span class="token operator">=</span> q<span class="token operator">-></span>down<span class="token punctuation">)</span>                        <span class="token punctuation">;</span>                    p<span class="token operator">-></span>down <span class="token operator">=</span> q<span class="token operator">-></span>down<span class="token punctuation">;</span>                    q<span class="token operator">-></span>down <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>nums <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delete_crossList</span><span class="token punctuation">(</span>PCrossList clist<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    OLNode<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    OLNode<span class="token operator">*</span> tmp1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    OLNode<span class="token operator">*</span> tmp2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    OLNode<span class="token operator">*</span> t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    OLNode<span class="token operator">*</span> t1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    OLNode<span class="token operator">*</span> t2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除一个结点需要修改行结点指针和列结点指针</span>    tmp <span class="token operator">=</span> clist<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> clist<span class="token operator">-></span>colhead<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-></span>value <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        clist<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>value <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        clist<span class="token operator">-></span>colhead<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token operator">-></span>down<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>value <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//行遍历元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp1 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">-></span>row <span class="token operator">==</span> row <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">-></span>col <span class="token operator">==</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            tmp1<span class="token operator">-></span>right <span class="token operator">=</span> tmp2<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//列遍历元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t1 <span class="token operator">=</span> t<span class="token punctuation">;</span>        t <span class="token operator">=</span> t<span class="token operator">-></span>down<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;&amp;</span> t<span class="token operator">-></span>row <span class="token operator">==</span> row <span class="token operator">&amp;&amp;</span> t<span class="token operator">-></span>col <span class="token operator">==</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t2 <span class="token operator">=</span> t<span class="token punctuation">;</span>            t1<span class="token operator">-></span>down <span class="token operator">=</span> t2<span class="token operator">-></span>down<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    clist<span class="token operator">-></span>nums<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">del_cross_list</span><span class="token punctuation">(</span>PCrossList L<span class="token punctuation">,</span> ElemType k<span class="token punctuation">)</span><span class="token punctuation">{</span>    OLink pt<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pt <span class="token operator">=</span> L<span class="token operator">-></span>rowhead<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> L<span class="token operator">-></span>cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pt <span class="token operator">&amp;&amp;</span> pt<span class="token operator">-></span>col <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pt<span class="token operator">-></span>value <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">delete_crossList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                pt <span class="token operator">=</span> pt<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果有更好的方法或者以上程序有任何错误，欢迎讨论。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏矩阵加法（C语言）</title>
      <link href="2020/04/17/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8A%A0%E6%B3%95%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>2020/04/17/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8A%A0%E6%B3%95%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>实现三元组表示的两个稀疏矩阵的加法。相关定义如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100          </span><span class="token comment" spellcheck="true">//假设非零元个数的最大值为100</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//非零元的行下标和列下标，i 和 j 从 1 开始计数，与数学中矩阵元素的编号一致</span>    ElemType e<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//非零元的值</span><span class="token punctuation">}</span>Triple<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Triple data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 非零元三元组表</span>    <span class="token keyword">int</span>    m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> len<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 矩阵的行数、列数和非零元个数</span><span class="token punctuation">}</span>TSMatrix<span class="token punctuation">;</span></code></pre><p>在三元组中，i 和 j 从 1 开始计数，与数学中矩阵元素的编号一致<br> 矩阵加法函数的原型为：</p><pre class=" language-c"><code class="language-c">pM<span class="token punctuation">,</span> pN<span class="token punctuation">,</span> pQ 分别指向三个矩阵，当 pM 和 pN 两个矩阵不可加时，函数返回 false，否则函数返回 true，且 pQ 指向两个矩阵的和。</code></pre><p>pM, pN, pQ 分别指向三个矩阵，当 pM 和 pN 两个矩阵不可加时，函数返回 false，否则函数返回 true，且 pQ 指向两个矩阵的和。</p><pre class=" language-c"><code class="language-c">bool <span class="token function">add_matrix</span><span class="token punctuation">(</span><span class="token keyword">const</span> TSMatrix<span class="token operator">*</span> pM<span class="token punctuation">,</span> <span class="token keyword">const</span> TSMatrix<span class="token operator">*</span> pN<span class="token punctuation">,</span> TSMatrix<span class="token operator">*</span> pQ<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pM<span class="token operator">-></span>m <span class="token operator">!=</span> pN<span class="token operator">-></span>m <span class="token operator">||</span> pM<span class="token operator">-></span>n <span class="token operator">!=</span> pN<span class="token operator">-></span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span>MAXSIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>MAXSIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pM<span class="token operator">-></span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>pM<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pM<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> pM<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pN<span class="token operator">-></span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>pN<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pN<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> pN<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pM<span class="token operator">-></span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> pM<span class="token operator">-></span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pQ<span class="token operator">-></span>data<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                pQ<span class="token operator">-></span>data<span class="token punctuation">[</span>tot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>                pQ<span class="token operator">-></span>data<span class="token punctuation">[</span>tot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pQ<span class="token operator">-></span>len <span class="token operator">=</span> tot<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果有更好的方法或者以上程序有任何错误，欢迎讨论。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块链串（C语言实现子串简历、查找、输出）</title>
      <link href="2020/04/15/%E5%9D%97%E9%93%BE%E4%B8%B2%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%90%E4%B8%B2%E7%AE%80%E5%8E%86%E3%80%81%E6%9F%A5%E6%89%BE%E3%80%81%E8%BE%93%E5%87%BA%EF%BC%89/"/>
      <url>2020/04/15/%E5%9D%97%E9%93%BE%E4%B8%B2%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%90%E4%B8%B2%E7%AE%80%E5%8E%86%E3%80%81%E6%9F%A5%E6%89%BE%E3%80%81%E8%BE%93%E5%87%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BLOCK_SIZE 4    </span><span class="token comment" spellcheck="true">// 可由用户定义的块大小</span><span class="token macro property">#<span class="token directive keyword">define</span> BLS_BLANK '#'   </span><span class="token comment" spellcheck="true">// 用于空白处的补齐字符</span><span class="token macro property">#<span class="token directive keyword">define</span> bool int</span><span class="token macro property">#<span class="token directive keyword">define</span> true 1</span><span class="token macro property">#<span class="token directive keyword">define</span> false 0</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _block<span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span>BLOCK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//块的数据域</span>    <span class="token keyword">struct</span> _block <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//块的指针域</span><span class="token punctuation">}</span> Block<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    Block <span class="token operator">*</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 串的头指针</span>    Block <span class="token operator">*</span>tail<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 串的尾指针</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 串的当前长度</span><span class="token punctuation">}</span> BLString<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">blstr_init</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//初始化</span><span class="token keyword">void</span> <span class="token function">CreatBLS</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建</span><span class="token keyword">void</span> <span class="token function">PrintBLS</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出</span><span class="token keyword">int</span> <span class="token function">blstr_substr</span><span class="token punctuation">(</span>BLString src<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> BLString<span class="token operator">*</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查找</span><span class="token comment" spellcheck="true">/*src为要查找的字符串，pos为子串开始的下标，len为子串的长度*/</span><span class="token comment" spellcheck="true">/*sub在函数调用运行前指向一个已经初始化好的空串，在函数返回时，sub指向串src从第pos个字符起长度为len的子串*/</span><span class="token comment" spellcheck="true">/*函数查找成功返回true，参数不正确返回 false*/</span><span class="token comment" spellcheck="true">//字符串初始化函数：</span><span class="token keyword">void</span> <span class="token function">blstr_init</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">-></span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    T<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    T<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    BLString src<span class="token punctuation">,</span> sub<span class="token punctuation">;</span>    <span class="token function">blstr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化</span>    <span class="token function">blstr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreatBLS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建原字符串</span>    <span class="token comment" spellcheck="true">//PrintBLS(&amp;src);</span>    flag<span class="token operator">=</span><span class="token function">blstr_substr</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token function">PrintBLS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">PrintBLS</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计数</span>    Block <span class="token operator">*</span>bl<span class="token operator">=</span>T<span class="token operator">-></span>head<span class="token punctuation">;</span>    n <span class="token operator">=</span> T<span class="token operator">-></span>len <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>len <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">)</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"字串长度：%d\n"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>bl<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag: %d  bl->ch[%d]: %c\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span> i<span class="token punctuation">,</span> bl<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        flag<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">>=</span>T<span class="token operator">-></span>len<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>BLOCK_SIZE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            bl<span class="token operator">=</span>bl<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">CreatBLS</span><span class="token punctuation">(</span>BLString <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abcdefghijklmno"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//k为ch的下标，m为str的下标</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n为块的个数</span>    Block <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创造头尾指针</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> len <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">)</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    front <span class="token operator">=</span> <span class="token punctuation">(</span>Block<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建头节点</span>    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">=</span>front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针指向头节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rear<span class="token operator">=</span><span class="token punctuation">(</span>Block<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>BLOCK_SIZE<span class="token operator">&amp;&amp;</span>m<span class="token operator">!=</span>len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token operator">*</span>rear<span class="token punctuation">)</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front<span class="token operator">-></span>next <span class="token operator">=</span> rear<span class="token punctuation">;</span>        front <span class="token operator">=</span> rear<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rear<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> len <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span> m <span class="token operator">&lt;</span> BLOCK_SIZE<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span>        rear<span class="token operator">-></span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> BLS_BLANK<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>tail<span class="token operator">=</span>rear<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    Block <span class="token operator">*</span>t<span class="token operator">=</span>front<span class="token punctuation">;</span>    front<span class="token operator">=</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">blstr_substr</span><span class="token punctuation">(</span>BLString src<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> BLString<span class="token operator">*</span> sub<span class="token punctuation">)</span><span class="token punctuation">{</span>    Block <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创造头尾指针</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n为块的个数</span>    <span class="token keyword">int</span> src_len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//src下标</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Block<span class="token operator">*</span> sh<span class="token operator">=</span>src<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span>src<span class="token punctuation">.</span>len<span class="token operator">-</span>pos<span class="token punctuation">)</span>        len<span class="token operator">=</span>src<span class="token punctuation">.</span>len<span class="token operator">-</span>pos<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">>=</span> src<span class="token punctuation">.</span>len <span class="token operator">||</span> len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    n <span class="token operator">=</span> len <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">)</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//寻找src中的字符</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pos<span class="token operator">/</span>BLOCK_SIZE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sh<span class="token operator">=</span>sh<span class="token operator">-></span>next<span class="token punctuation">;</span>        src_len<span class="token operator">+</span><span class="token operator">=</span>BLOCK_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> src_k<span class="token operator">=</span>pos<span class="token operator">-</span>src_len<span class="token punctuation">;</span>    front <span class="token operator">=</span> <span class="token punctuation">(</span>Block<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建头节点</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">=</span>front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针指向头节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>Block<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>BLOCK_SIZE<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token operator">*</span>rear<span class="token punctuation">)</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>sh<span class="token operator">-></span>ch<span class="token punctuation">[</span>src_k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src_len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>src_k<span class="token operator">==</span>BLOCK_SIZE<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sh<span class="token operator">=</span>sh<span class="token operator">-></span>next<span class="token punctuation">;</span>                src_k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>src_len<span class="token operator">==</span>pos<span class="token operator">+</span>len<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front<span class="token operator">-></span>next <span class="token operator">=</span> rear<span class="token punctuation">;</span>        front <span class="token operator">=</span> rear<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rear<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">%</span>BLOCK_SIZE<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> len <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span> n <span class="token operator">&lt;</span> BLOCK_SIZE<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>            rear<span class="token operator">-></span>ch<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> BLS_BLANK<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">.</span>tail<span class="token operator">=</span>rear<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    front<span class="token operator">=</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果有更好的方法或者以上程序有任何错误，欢迎讨论。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串替换-实现字符串替换操作</title>
      <link href="2020/04/10/%E4%B8%B2%E6%9B%BF%E6%8D%A2-%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/"/>
      <url>2020/04/10/%E4%B8%B2%E6%9B%BF%E6%8D%A2-%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>不调用库函数，自己实现字符串替换操作，函数原型为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">int</span> outlen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldstr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newstr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数说明:</p><p>in， 原始字符串，保持不变</p><p>out, 存放替换结果的字符串</p><p>outlen，out空间的大小</p><p>oldstr，要替换的旧字符串</p><p>newstr，替换成的新字符串</p><p>函数返回成功替换的次数，即有多少个子串被成功替换</p><p>在替换过程中，任何情况下所得字符串（及结束符）不应该超过 outlen，如果某次替换所得字符串的长度超过 outlen，则不进行这次替换操作，整个替换操作结束。如：<br>原始串为 “aaabbbccc”，outlen 为14, oldstr 为 “c”，newstr 为 “333” 时，两次替换后得 “aaabbb333333c”，此时字符串占用空间为14字节。<br>如果再进行替换，则会超出 out 所占用的空间，所以停止替换操作。此时函数应该返回 2, out指向的串为 “aaabbb333333c”<br>再如：原始串为 “aaabbbccc”，outlen 为10, oldstr 为 “bb”，newstr 为 “123456”，进行替换后所得的串应该为 “aaa123456” （长度为9）与结束符一共占 10 个字节，此时函数应该返回 1。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"dsstring.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> outlen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> oldstr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> newstr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count_times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> outlen <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> oldstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            outlen<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> oldstr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>k <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">!=</span> oldstr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">get_len</span><span class="token punctuation">(</span>oldstr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>outlen <span class="token operator">></span> <span class="token function">get_len</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            i <span class="token operator">+</span><span class="token operator">=</span> k<span class="token punctuation">;</span>                            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count_times<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> newstr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> newstr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    outlen<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                outlen<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count_times<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果有更好的方法或者以上程序有任何错误，欢迎讨论。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义串比较</title>
      <link href="2020/03/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%B2%E6%AF%94%E8%BE%83/"/>
      <url>2020/03/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%B2%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>不调用库函数，自己实现字符串的比较操作：该操作当比较的两个字符是都是字母，且两个字符互为大小写（如a和A、e和E）时认为两个字符相同，否则不同，其比较结果按这两个字符的原值确定。函数的返回值规定如下：<br>返回值  &lt; 0：第一个不匹配的字符在 ptr1 中的值低于 ptr2 中的值<br>返回值 == 0：两个字符串的内容相等<br>返回值  &gt; 0：第一个不匹配的字符在 ptr1 中的值大于在 ptr2 中的值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">str_compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ptr1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ptr2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">||</span> ptr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ptr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ptr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">||</span> ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ptr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ptr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列-循环链表表示队列</title>
      <link href="2020/03/25/%E9%98%9F%E5%88%97-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA%E9%98%9F%E5%88%97/"/>
      <url>2020/03/25/%E9%98%9F%E5%88%97-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>假设以带头结点的循环链表表示队列，并且只设一个指针指向队尾元素结点（注意不设头指针），请完成下列任务：<br>1: 队列初始化，成功返回真，否则返回假：<code>bool init_queue(LinkQueue *LQ);</code><br>2: 入队列，成功返回真，否则返回假：<code>bool enter_queue(LinkQueue *LQ, ElemType x);</code><br>3: 出队列，成功返回真，且*x为出队的值，否则返回假：<code>bool leave_queue(LinkQueue *LQ, ElemType *x);</code><br>相关定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _QueueNode <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*数据域*/</span>    <span class="token keyword">struct</span> _QueueNode <span class="token operator">*</span>next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*指针域*/</span><span class="token punctuation">}</span>LinkQueueNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkQueue<span class="token punctuation">;</span></code></pre><p>代码实现功能：</p><pre class=" language-c"><code class="language-c">bool <span class="token function">init_queue</span><span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span> LQ<span class="token punctuation">)</span><span class="token punctuation">{</span>        LinkQueue HeadNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建一个头指针</span>    HeadNode <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HeadNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>        HeadNode<span class="token operator">-></span>next <span class="token operator">=</span> HeadNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//形成循环队列</span>    <span class="token operator">*</span>LQ <span class="token operator">=</span> HeadNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针指向最后一个元素</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">enter_queue</span><span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span> LQ<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkQueue NewNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的空间</span>    NewNode <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQueueNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NewNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            NewNode<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储数据   </span>        NewNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LQ<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将（*LQ）的next成员赋值给NewNode的next，即让新的指针域指向头节点</span>        <span class="token punctuation">(</span><span class="token operator">*</span>LQ<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> NewNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针指向最后一个元素</span>        <span class="token operator">*</span>LQ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LQ<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往后挪一位</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">leave_queue</span><span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span> LQ<span class="token punctuation">,</span> ElemType<span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>       LinkQueue temp<span class="token punctuation">,</span> p<span class="token punctuation">;</span>    p<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>LQ<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p现在是队头，头节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token operator">*</span>LQ<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果是空队列   </span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    temp <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//temp指向队头的下一个元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token operator">*</span>LQ<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//下一个成员是尾指针，即队列中只有一个元素</span>        <span class="token operator">*</span>x <span class="token operator">=</span> temp<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳过temp</span>        <span class="token operator">*</span>LQ <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针指向temp</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>x <span class="token operator">=</span> temp<span class="token operator">-></span>data<span class="token punctuation">;</span>              p<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>           <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-倒数查找</title>
      <link href="2020/03/06/%E9%93%BE%E8%A1%A8-%E5%80%92%E6%95%B0%E6%9F%A5%E6%89%BE/"/>
      <url>2020/03/06/%E9%93%BE%E8%A1%A8-%E5%80%92%E6%95%B0%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。"><a href="#已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。" class="headerlink" title="已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。"></a>已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _lnklist<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> _lnklist <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _lnklist Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _lnklist <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lnk_del_x2y</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> ElemType mink<span class="token punctuation">,</span> ElemType maxk<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;=</span> mink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;</span> maxk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-删除范围内节点</title>
      <link href="2020/03/06/%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E8%8C%83%E5%9B%B4%E5%86%85%E8%8A%82%E7%82%B9/"/>
      <url>2020/03/06/%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E8%8C%83%E5%9B%B4%E5%86%85%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。"><a href="#已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。" class="headerlink" title="已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。"></a>已知线性表中的元素（整数）以值递增有序排列，并以单链表作存储结构。试写一高效算法，删除表中所有大于mink且小于maxk的元素（若表中存在这样的元素），分析你的算法的时间复杂度。</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _lnklist<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> _lnklist <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _lnklist Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _lnklist <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lnk_del_x2y</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> ElemType mink<span class="token punctuation">,</span> ElemType maxk<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    pre <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;=</span> mink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;</span> maxk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表-数据调整</title>
      <link href="2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E6%95%B0%E6%8D%AE%E8%B0%83%E6%95%B4/"/>
      <url>2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E6%95%B0%E6%8D%AE%E8%B0%83%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<h4 id="已知顺序表L中的数据元素类型为int。设计算法将其调整为左右两部分，左边的元素（即排在前面的）均为奇数，右边所有元素（即排在后面的）均为偶数，并要求算法的时间复杂度为O-n-空间复杂度为O（1）。"><a href="#已知顺序表L中的数据元素类型为int。设计算法将其调整为左右两部分，左边的元素（即排在前面的）均为奇数，右边所有元素（即排在后面的）均为偶数，并要求算法的时间复杂度为O-n-空间复杂度为O（1）。" class="headerlink" title="已知顺序表L中的数据元素类型为int。设计算法将其调整为左右两部分，左边的元素（即排在前面的）均为奇数，右边所有元素（即排在后面的）均为偶数，并要求算法的时间复杂度为O(n),空间复杂度为O（1）。"></a>已知顺序表L中的数据元素类型为int。设计算法将其调整为左右两部分，左边的元素（即排在前面的）均为奇数，右边所有元素（即排在后面的）均为偶数，并要求算法的时间复杂度为O(n),空间复杂度为O（1）。</h4><p>快速排序的方法，把奇数偶数分到两边</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _seqlist<span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _seqlist SeqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">odd_even</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    ElemType demo <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//交换顺序</span>            tmp <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> demo<span class="token punctuation">;</span>            demo <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表-删除重复</title>
      <link href="2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D/"/>
      <url>2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="编写算法，在一非递减的顺序表L中，删除所有值相等的多余元素。要求时间复杂度为O-n-，空间复杂度为O-1-。"><a href="#编写算法，在一非递减的顺序表L中，删除所有值相等的多余元素。要求时间复杂度为O-n-，空间复杂度为O-1-。" class="headerlink" title="编写算法，在一非递减的顺序表L中，删除所有值相等的多余元素。要求时间复杂度为O(n)，空间复杂度为O(1)。"></a>编写算法，在一非递减的顺序表L中，删除所有值相等的多余元素。要求时间复杂度为O(n)，空间复杂度为O(1)。</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _seqlist<span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _seqlist SeqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del_dupnum</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ElemType demo <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> demo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            demo <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>last <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表-删除指定范围</title>
      <link href="2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4/"/>
      <url>2020/03/06/%E9%A1%BA%E5%BA%8F%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h5 id="题目：设计一个高效的算法，从顺序表L中删除所有值介于x和y之间-包括x和y-的所有元素（假设y-gt-x），要求时间复杂度为O-n-，空间复杂度为O-1-。"><a href="#题目：设计一个高效的算法，从顺序表L中删除所有值介于x和y之间-包括x和y-的所有元素（假设y-gt-x），要求时间复杂度为O-n-，空间复杂度为O-1-。" class="headerlink" title="题目：设计一个高效的算法，从顺序表L中删除所有值介于x和y之间(包括x和y)的所有元素（假设y&gt;=x），要求时间复杂度为O(n)，空间复杂度为O(1)。"></a>题目：设计一个高效的算法，从顺序表L中删除所有值介于x和y之间(包括x和y)的所有元素（假设y&gt;=x），要求时间复杂度为O(n)，空间复杂度为O(1)。</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _seqlist<span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _seqlist SeqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">del_x2y</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">,</span> ElemType y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">||</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在范围外，则继续赋值</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    L<span class="token operator">-></span>last<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
